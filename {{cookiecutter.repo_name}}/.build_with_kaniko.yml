.build_with_kaniko:
  # Hidden job to use as an "extends" template
  # https://docs.gitlab.com/ee/ci/yaml/#hide-jobs
  only:
    variables:
      - $BUILD_DOCKER_IMAGE != null
  tags:
  - docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
{%- if cookiecutter.docs_require_package == 'yes' %}
  stage: buildimage
{%- else %}
  stage: build
{%- endif %}
  script:
    - start_build_with_kaniko=$(date +%s)
    - echo "Building and shipping image to $CI_REGISTRY_IMAGE"
      #Build date for opencontainers
    - BUILDDATE="'$(date '+%FT%T%z' | sed -E -n 's/(\+[0-9]{2})([0-9]{2})$/\1:\2/p')'" #rfc 3339 date
    - IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.created=$BUILDDATE --label build-date=$BUILDDATE"
      #Description for opencontainers
    - BUILDTITLE=$(echo $CI_PROJECT_TITLE | tr " " "_")
    - IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.title=$BUILDTITLE --label org.opencontainers.image.description=$BUILDTITLE"
      #Add ref.name for opencontainers
    - IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.ref.name=$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME"
      #Build Version Label and Tag from git tag, LastVersionTagInGit was placed by a previous job artifact
    - if [[ "$VERSIONLABELMETHOD" == "LastVersionTagInGit" ]]; then VERSIONLABEL=$(cat VERSIONTAG.txt); fi
    - if [[ "$VERSIONLABELMETHOD" == "OnlyIfThisCommitHasVersion" ]]; then VERSIONLABEL=$CI_COMMIT_TAG; fi
    - | 
      if [[ ! -z "$VERSIONLABEL" ]]; then 
        IMAGE_LABELS="$IMAGE_LABELS --label org.opencontainers.image.version=$VERSIONLABEL"
        ADDITIONALTAGLIST="$ADDITIONALTAGLIST $VERSIONLABEL"
      fi
    - ADDITIONALTAGLIST="$ADDITIONALTAGLIST $CI_COMMIT_REF_NAME $CI_COMMIT_SHORT_SHA"
    - if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then ADDITIONALTAGLIST="$ADDITIONALTAGLIST latest"; fi
    - | 
      if [[ -n "$ADDITIONALTAGLIST" ]]; then 
        for TAG in $ADDITIONALTAGLIST; do 
          FORMATTEDTAGLIST="${FORMATTEDTAGLIST} --tag $CI_REGISTRY_IMAGE:$TAG "; 
        done; 
      fi
      #Reformat Docker tags to kaniko's --destination argument:
    - FORMATTEDTAGLIST=$(echo "${FORMATTEDTAGLIST}" | sed s/\-\-tag/\-\-destination/g)

    # If BASE_IMAGE is set, pass that down to the docker build.
    - if [ -z ${BASE_IMAGE+ABC} ]; then
    - echo "BASE_IMAGE is unset, so leaving it as the default in the Dockerfile."
    - else
    - BUILD_ARGS="$BUILD_ARGS --build-arg BASE_IMAGE=$BASE_IMAGE"
    - fi
    # For cleanliness, we would prefer to leave build-args *unset* if they are unset here.
    # Thus, we don't want to unconditionally pass --build-arg ETC_ENVIRONMENT_LOCATION=$ETC_ENVIRONMENT_LOCATION,
    # as that would set ETC_ENVIRONMENT_LOCATION to an empty string if ETC_ENVIRONMENT_LOCATION were unset here.
    - if [ -z ${ETC_ENVIRONMENT_LOCATION+ABC} ]; then echo "ETC_ENVIRONMENT_LOCATION is unset, so leaving it unset in the build."; else BUILD_ARGS="$BUILD_ARGS --build-arg ETC_ENVIRONMENT_LOCATION=$ETC_ENVIRONMENT_LOCATION"; fi
    # Currently, kaniko does not support Docker BuildKit --secrets.
    # However, currently, kaniko does not save any --build-arg values in the history.
    # https://github.com/GoogleContainerTools/kaniko/issues/1327
    # But this is not guaranteed to always remain true.
    # For now, until kaniko sorts out how they want to handle secrets,
    # we smuggle in any secrets with a magic variable name that is not stored by either docker build or kaniko.
    # https://docs.docker.com/engine/reference/builder/#predefined-args
    - if [ -z ${SSH_PRIVATE_DEPLOY_KEY+ABC} ]; then echo "SSH_PRIVATE_DEPLOY_KEY is unset, so leaving FTP_PROXY unset in the build."; else BUILD_ARGS="$BUILD_ARGS --build-arg FTP_PROXY=$SSH_PRIVATE_DEPLOY_KEY"; fi

    - echo "FORMATTEDTAGLIST = $FORMATTEDTAGLIST"
    - echo "IMAGE_LABELS = $IMAGE_LABELS"
    - echo "BUILD_ARGS = $BUILD_ARGS"

    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n $CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD | base64)\"}}}" > /kaniko/.docker/config.json
    # --build-arg HTTP_PROXY=$http_proxy is needed for e.g. apk add, when we fetch http://dl-cdn.alpinelinux.org/alpine/v3.12/main/x86_64/APKINDEX.tar.gz
    - right_before_kaniko_executor=$(date +%s)
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/dockerfiles/test.Dockerfile $BUILD_ARGS $FORMATTEDTAGLIST $IMAGE_LABELS
    - echo "/kaniko/executor took $(( $(date +%s) - right_before_kaniko_executor)) seconds"
    - echo "build_with_kaniko took $(( $(date +%s) - start_build_with_kaniko)) seconds total"

